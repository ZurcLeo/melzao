#!/usr/bin/env node

/**
 * API Test Script
 * Tests all the new multi-user API endpoints
 */

const axios = require('axios');
const database = require('../database');

const BASE_URL = 'http://localhost:5001/api';

// Test data
let adminToken, hostToken, hostUserId, questionId, configId;

async function makeRequest(method, url, data = {}, token = null) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${url}`,
      headers: {}
    };

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    if (method.toLowerCase() !== 'get') {
      config.data = data;
      config.headers['Content-Type'] = 'application/json';
    } else if (Object.keys(data).length > 0) {
      config.params = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status || 500
    };
  }
}

async function runApiTests() {
  console.log('üöÄ Iniciando testes das APIs multi-usu√°rio...\n');

  try {
    // Initialize database first
    console.log('1Ô∏è‚É£ Inicializando banco de dados...');
    await database.initialize();
    console.log('‚úÖ Banco de dados inicializado\n');

    // Test 1: Health check
    console.log('2Ô∏è‚É£ Testando health check...');
    const healthResponse = await makeRequest('GET', '../health');
    if (healthResponse.success) {
      console.log('‚úÖ Health check OK');
    } else {
      console.log('‚ùå Health check falhou:', healthResponse.error);
    }

    // Test 2: Admin authentication
    console.log('\n3Ô∏è‚É£ Testando autentica√ß√£o do admin...');
    const adminLoginResponse = await makeRequest('POST', '/auth/login', {
      email: 'admin@melzao.com',
      password: 'admin123'
    });

    if (adminLoginResponse.success) {
      adminToken = adminLoginResponse.data.token;
      console.log('‚úÖ Admin logado com sucesso');
    } else {
      console.log('‚ùå Falha no login do admin:', adminLoginResponse.error);
      throw new Error('Cannot continue without admin token');
    }

    // Test 3: Register new host
    console.log('\n4Ô∏è‚É£ Registrando novo host...');
    const hostEmail = `host_${Date.now()}@test.com`;
    const registerResponse = await makeRequest('POST', '/auth/register', {
      email: hostEmail,
      password: 'senhaSegura123',
      name: 'Host de Teste API'
    });

    if (registerResponse.success) {
      console.log('‚úÖ Host registrado com sucesso:', hostEmail);
    } else {
      console.log('‚ùå Falha no registro:', registerResponse.error);
    }

    // Test 4: Get pending users (admin)
    console.log('\n5Ô∏è‚É£ Buscando usu√°rios pendentes...');
    const pendingResponse = await makeRequest('GET', '/admin/users/pending', {}, adminToken);

    if (pendingResponse.success) {
      const pendingUsers = pendingResponse.data.users;
      console.log(`‚úÖ ${pendingUsers.length} usu√°rios pendentes encontrados`);

      if (pendingUsers.length > 0) {
        const userToApprove = pendingUsers.find(u => u.email === hostEmail);
        if (userToApprove) {
          hostUserId = userToApprove.id;

          // Test 5: Approve host
          console.log('\n6Ô∏è‚É£ Aprovando host...');
          const approveResponse = await makeRequest('PUT', `/admin/users/${hostUserId}/approve`, {}, adminToken);

          if (approveResponse.success) {
            console.log('‚úÖ Host aprovado com sucesso');
          } else {
            console.log('‚ùå Falha na aprova√ß√£o:', approveResponse.error);
          }
        }
      }
    } else {
      console.log('‚ùå Falha ao buscar usu√°rios pendentes:', pendingResponse.error);
    }

    // Test 6: Host authentication
    console.log('\n7Ô∏è‚É£ Testando autentica√ß√£o do host...');
    const hostLoginResponse = await makeRequest('POST', '/auth/login', {
      email: hostEmail,
      password: 'senhaSegura123'
    });

    if (hostLoginResponse.success) {
      hostToken = hostLoginResponse.data.token;
      console.log('‚úÖ Host logado com sucesso');
    } else {
      console.log('‚ùå Falha no login do host:', hostLoginResponse.error);
    }

    // Test 7: Get question categories
    console.log('\n8Ô∏è‚É£ Testando busca de categorias...');
    const categoriesResponse = await makeRequest('GET', '/questions/categories', {}, hostToken);

    if (categoriesResponse.success) {
      const categories = categoriesResponse.data.categories;
      console.log(`‚úÖ ${categories.length} categorias encontradas:`, categories.map(c => c.name).join(', '));
    } else {
      console.log('‚ùå Falha ao buscar categorias:', categoriesResponse.error);
    }

    // Test 8: Create custom question
    console.log('\n9Ô∏è‚É£ Criando quest√£o personalizada...');
    const questionData = {
      category: 'LGBT+',
      questionText: 'Qual foi a primeira parada do orgulho LGBT+ do Brasil?',
      options: [
        'A) S√£o Paulo, 1997',
        'B) Rio de Janeiro, 1995',
        'C) Salvador, 1999',
        'D) Bras√≠lia, 2000'
      ],
      correctAnswer: 'A',
      level: 3,
      honeyValue: 150,
      explanation: 'A primeira parada LGBT+ do Brasil aconteceu em S√£o Paulo em 1997.'
    };

    const createQuestionResponse = await makeRequest('POST', '/questions', questionData, hostToken);

    if (createQuestionResponse.success) {
      questionId = createQuestionResponse.data.id;
      console.log('‚úÖ Quest√£o criada com sucesso, ID:', questionId);
    } else {
      console.log('‚ùå Falha ao criar quest√£o:', createQuestionResponse.error);
    }

    // Test 9: Get user's questions
    console.log('\nüîü Buscando quest√µes do usu√°rio...');
    const myQuestionsResponse = await makeRequest('GET', '/questions/my', {}, hostToken);

    if (myQuestionsResponse.success) {
      const questions = myQuestionsResponse.data.questions;
      console.log(`‚úÖ ${questions.length} quest√µes encontradas`);
      if (questions.length > 0) {
        console.log('   Primeira quest√£o:', questions[0].question_text.substring(0, 50) + '...');
      }
    } else {
      console.log('‚ùå Falha ao buscar quest√µes:', myQuestionsResponse.error);
    }

    // Test 10: Update question honey value
    if (questionId) {
      console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Atualizando valor em honey da quest√£o...');
      const updateHoneyResponse = await makeRequest('PUT', `/questions/${questionId}/honey-value`, {
        honeyValue: 200
      }, hostToken);

      if (updateHoneyResponse.success) {
        console.log('‚úÖ Valor em honey atualizado para 200');
      } else {
        console.log('‚ùå Falha ao atualizar honey:', updateHoneyResponse.error);
      }
    }

    // Test 11: Create game configuration
    console.log('\n1Ô∏è‚É£2Ô∏è‚É£ Criando configura√ß√£o de jogo...');
    const configData = {
      configName: 'Config de Teste',
      honeyMultiplier: 1.5,
      timeLimit: 45,
      customQuestionsOnly: false,
      allowLifelines: true,
      maxParticipants: 50,
      autoAdvance: false,
      themeColor: '#9B59B6'
    };

    const createConfigResponse = await makeRequest('POST', '/configs', configData, hostToken);

    if (createConfigResponse.success) {
      configId = createConfigResponse.data.configId;
      console.log('‚úÖ Configura√ß√£o criada com sucesso, ID:', configId);
    } else {
      console.log('‚ùå Falha ao criar configura√ß√£o:', createConfigResponse.error);
    }

    // Test 12: Get user's configurations
    console.log('\n1Ô∏è‚É£3Ô∏è‚É£ Buscando configura√ß√µes do usu√°rio...');
    const configsResponse = await makeRequest('GET', '/configs', {}, hostToken);

    if (configsResponse.success) {
      const configs = configsResponse.data.configs;
      console.log(`‚úÖ ${configs.length} configura√ß√µes encontradas`);
      configs.forEach(config => {
        console.log(`   - ${config.config_name} (Multiplier: ${config.honey_multiplier}x)${config.is_default ? ' [PADR√ÉO]' : ''}`);
      });
    } else {
      console.log('‚ùå Falha ao buscar configura√ß√µes:', configsResponse.error);
    }

    // Test 13: Get user question stats
    console.log('\n1Ô∏è‚É£4Ô∏è‚É£ Buscando estat√≠sticas de quest√µes...');
    const questionStatsResponse = await makeRequest('GET', '/questions/my/stats', {}, hostToken);

    if (questionStatsResponse.success) {
      const stats = questionStatsResponse.data.stats.overview;
      console.log('‚úÖ Estat√≠sticas de quest√µes:');
      console.log(`   - Total: ${stats.total_questions}`);
      console.log(`   - Ativas: ${stats.active_questions}`);
      console.log(`   - Valor m√©dio: ${Math.round(stats.avg_honey_value || 0)} honey`);
    } else {
      console.log('‚ùå Falha ao buscar estat√≠sticas:', questionStatsResponse.error);
    }

    // Test 14: Get admin stats
    console.log('\n1Ô∏è‚É£5Ô∏è‚É£ Buscando estat√≠sticas administrativas...');
    const adminStatsResponse = await makeRequest('GET', '/admin/stats', {}, adminToken);

    if (adminStatsResponse.success) {
      const stats = adminStatsResponse.data.stats;
      console.log('‚úÖ Estat√≠sticas do sistema:');
      console.log(`   - Total de usu√°rios: ${stats.total_users}`);
      console.log(`   - Usu√°rios ativos: ${stats.active_users}`);
      console.log(`   - Hosts: ${stats.host_users}`);
      console.log(`   - Quest√µes personalizadas: ${stats.total_custom_questions}`);
    } else {
      console.log('‚ùå Falha ao buscar estat√≠sticas admin:', adminStatsResponse.error);
    }

    // Test 15: Token verification
    console.log('\n1Ô∏è‚É£6Ô∏è‚É£ Testando verifica√ß√£o de token...');
    const verifyResponse = await makeRequest('GET', '/auth/verify', {}, hostToken);

    if (verifyResponse.success) {
      const user = verifyResponse.data.user;
      console.log(`‚úÖ Token v√°lido para: ${user.name} (${user.role})`);
    } else {
      console.log('‚ùå Falha na verifica√ß√£o do token:', verifyResponse.error);
    }

    // Test 16: Question validation
    console.log('\n1Ô∏è‚É£7Ô∏è‚É£ Testando valida√ß√£o de quest√£o...');
    const invalidQuestion = {
      category: '',
      questionText: 'Curta',
      options: ['A', 'B'],
      correctAnswer: 'X',
      level: 15,
      honeyValue: 100000
    };

    const validateResponse = await makeRequest('POST', '/questions/validate', invalidQuestion, hostToken);

    if (validateResponse.success) {
      const validation = validateResponse.data;
      console.log(`‚úÖ Valida√ß√£o funcionando - V√°lida: ${validation.valid}`);
      if (!validation.valid) {
        console.log('   Erros encontrados:', validation.errors.slice(0, 3).join(', ') + '...');
      }
    } else {
      console.log('‚ùå Falha na valida√ß√£o:', validateResponse.error);
    }

    console.log('\nüéâ Todos os testes das APIs foram conclu√≠dos!');
    console.log('\nüìã Resumo dos testes:');
    console.log('   ‚úÖ Sistema de autentica√ß√£o funcionando');
    console.log('   ‚úÖ Gest√£o de usu√°rios (admin/host) funcionando');
    console.log('   ‚úÖ CRUD de quest√µes personalizadas funcionando');
    console.log('   ‚úÖ Sistema de configura√ß√µes funcionando');
    console.log('   ‚úÖ Valida√ß√£o de dados funcionando');
    console.log('   ‚úÖ Sistema de estat√≠sticas funcionando');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    console.error('\nüîç Stack trace:', error.stack);
  } finally {
    // Close database connection
    await database.close();
  }
}

// Helper to start server if needed
async function ensureServerRunning() {
  try {
    const healthResponse = await makeRequest('GET', '../health');
    return healthResponse.success;
  } catch (error) {
    return false;
  }
}

// Run tests if called directly
if (require.main === module) {
  ensureServerRunning().then(async (serverRunning) => {
    if (!serverRunning) {
      console.log('‚ö†Ô∏è Servidor n√£o est√° rodando. Inicie o servidor primeiro com:');
      console.log('   npm run dev');
      process.exit(1);
    }

    await runApiTests();
  });
}

module.exports = { runApiTests };