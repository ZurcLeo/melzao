{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_SERVER_URL || 'http://localhost:5001';\nclass ApiService {\n  async fetchApi(endpoint) {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error);\n      throw error;\n    }\n  }\n  async getGameStats() {\n    return this.fetchApi('/api/stats');\n  }\n  async getTopScores() {\n    return this.fetchApi('/api/leaderboard');\n  }\n  async getGameSessions(limit = 50) {\n    return this.fetchApi(`/api/sessions?limit=${limit}`);\n  }\n  async getSessionReport(sessionId) {\n    return this.fetchApi(`/api/sessions/${sessionId}`);\n  }\n  async getQuestionStats() {\n    return this.fetchApi('/api/questions/stats');\n  }\n  async getServerHealth() {\n    return this.fetchApi('/health');\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_SERVER_URL","ApiService","fetchApi","endpoint","response","fetch","ok","Error","status","json","error","console","getGameStats","getTopScores","getGameSessions","limit","getSessionReport","sessionId","getQuestionStats","getServerHealth","apiService"],"sources":["/Users/leocruz/Documents/Projects/melzao/client/src/services/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_SERVER_URL || 'http://localhost:5001';\n\nexport interface GameSession {\n  id: number;\n  session_id: string;\n  started_at: string;\n  ended_at?: string;\n  status: 'active' | 'finished';\n  total_participants: number;\n}\n\nexport interface Participant {\n  id: number;\n  participant_id: string;\n  session_id: string;\n  name: string;\n  joined_at: string;\n  final_status?: 'winner' | 'eliminated' | 'quit';\n  final_level: number;\n  total_earned: number;\n}\n\nexport interface Answer {\n  id: number;\n  participant_id: string;\n  question_id: string;\n  question_text: string;\n  level: number;\n  selected_answer: string;\n  correct_answer: string;\n  is_correct: boolean;\n  honey_earned: number;\n  answered_at: string;\n}\n\nexport interface GameStats {\n  totalSessions: number;\n  totalParticipants: number;\n  totalAnswers: number;\n  correctAnswers: number;\n  accuracyRate: string;\n  totalWinners: number;\n  averageHoneyEarned: number;\n}\n\nexport interface TopScore {\n  name: string;\n  total_earned: number;\n  final_level: number;\n  final_status: string;\n  session_date: string;\n}\n\nexport interface SessionReport {\n  session: GameSession;\n  participants: Array<Participant & { answers: Answer[] }>;\n}\n\nexport interface QuestionStats {\n  question_id: string;\n  question_text: string;\n  level: number;\n  times_asked: number;\n  correct_count: number;\n  accuracy_rate: number;\n}\n\nclass ApiService {\n  private async fetchApi<T>(endpoint: string): Promise<T> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  async getGameStats(): Promise<GameStats> {\n    return this.fetchApi<GameStats>('/api/stats');\n  }\n\n  async getTopScores(): Promise<TopScore[]> {\n    return this.fetchApi<TopScore[]>('/api/leaderboard');\n  }\n\n  async getGameSessions(limit = 50): Promise<GameSession[]> {\n    return this.fetchApi<GameSession[]>(`/api/sessions?limit=${limit}`);\n  }\n\n  async getSessionReport(sessionId: string): Promise<SessionReport> {\n    return this.fetchApi<SessionReport>(`/api/sessions/${sessionId}`);\n  }\n\n  async getQuestionStats(): Promise<QuestionStats[]> {\n    return this.fetchApi<QuestionStats[]>('/api/questions/stats');\n  }\n\n  async getServerHealth(): Promise<{ status: string; timestamp: string; service: string }> {\n    return this.fetchApi('/health');\n  }\n}\n\nexport const apiService = new ApiService();"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB;AAmEhF,MAAMC,UAAU,CAAC;EACf,MAAcC,QAAQA,CAAIC,QAAgB,EAAc;IACtD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,GAAGM,QAAQ,EAAE,CAAC;MAC1D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kBAAkBP,QAAQ,GAAG,EAAEO,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,YAAYA,CAAA,EAAuB;IACvC,OAAO,IAAI,CAACV,QAAQ,CAAY,YAAY,CAAC;EAC/C;EAEA,MAAMW,YAAYA,CAAA,EAAwB;IACxC,OAAO,IAAI,CAACX,QAAQ,CAAa,kBAAkB,CAAC;EACtD;EAEA,MAAMY,eAAeA,CAACC,KAAK,GAAG,EAAE,EAA0B;IACxD,OAAO,IAAI,CAACb,QAAQ,CAAgB,uBAAuBa,KAAK,EAAE,CAAC;EACrE;EAEA,MAAMC,gBAAgBA,CAACC,SAAiB,EAA0B;IAChE,OAAO,IAAI,CAACf,QAAQ,CAAgB,iBAAiBe,SAAS,EAAE,CAAC;EACnE;EAEA,MAAMC,gBAAgBA,CAAA,EAA6B;IACjD,OAAO,IAAI,CAAChB,QAAQ,CAAkB,sBAAsB,CAAC;EAC/D;EAEA,MAAMiB,eAAeA,CAAA,EAAoE;IACvF,OAAO,IAAI,CAACjB,QAAQ,CAAC,SAAS,CAAC;EACjC;AACF;AAEA,OAAO,MAAMkB,UAAU,GAAG,IAAInB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}